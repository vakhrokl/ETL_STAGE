/*
Deployment script for STAGE

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "STAGE"
:setvar DefaultFilePrefix "STAGE"
:setvar DefaultDataPath "E:\SQLDATA\DATABASE\"
:setvar DefaultLogPath "E:\SQLDATA\LOG\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [ETL].[DATASOURCE].[CONNETION] is being dropped, data loss could occur.

The column [ETL].[DATASOURCE].[CONNECTION] on table [ETL].[DATASOURCE] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [ETL].[DATASOURCE])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [ETL].[DATASOURCE]...';


GO
ALTER TABLE [ETL].[DATASOURCE] DROP COLUMN [CONNETION];


GO
ALTER TABLE [ETL].[DATASOURCE]
    ADD [CONNECTION] NVARCHAR (255) NOT NULL;


GO
PRINT N'Altering [ETL].[addSource]...';


GO
--ADD SQL SOURCE TO ETL.DATASOURCE TABLE, RETURN INSERTED OR EXISTED ROW
ALTER PROCEDURE [ETL].[addSource]
	@SourceName nvarchar(50),
	@ConnectionString nvarchar(255)
AS
BEGIN
	IF(NOT EXISTS (SELECT * FROM ETL.DATASOURCE WHERE NAME = @SourceName))
	BEGIN
		INSERT INTO ETL.DATASOURCE(NAME, CONNECTION)
			VALUES( @SourceName, @ConnectionString);

		SELECT  @@IDENTITY AS [ID], @SourceName AS [NAME], @ConnectionString AS [CONNETION];
	END
	ELSE
	BEGIN
		SELECT [ID], [NAME], [CONNECTION] FROM ETL.DATASOURCE WHERE NAME = @SourceName;
		PRINT 'THIS SOURCE IS ALREADY EXISTS';
	END
END
GO
PRINT N'Altering [ETL].[getTasks]...';


GO
ALTER PROCEDURE [ETL].[getTasks]
	@DataSourceId int = 0
AS
BEGIN
	SELECT 
		T.ID AS TASK_ID,
		T.[NAME] AS TASK_NAME,
		T.[SCHEMA] AS TASK_SCHEMA,
		T.TARGET_NAME,
		T.SOURCE_ID,
		T.DATA_QUERY,
		S.CONNECTION
	FROM ETL.TASKS T
	INNER JOIN ETL.DATASOURCE S ON T.SOURCE_ID = S.ID
	WHERE T.SOURCE_ID = @DataSourceId OR @DataSourceId = 0
END
GO
PRINT N'Update complete.';


GO
