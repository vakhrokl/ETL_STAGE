/*
Deployment script for STAGE

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "STAGE"
:setvar DefaultFilePrefix "STAGE"
:setvar DefaultDataPath "E:\SQLDATA\DATABASE\"
:setvar DefaultLogPath "E:\SQLDATA\LOG\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 1824de11-e303-4b89-90b5-dfd8ca843f2f';

PRINT N'Rename [ETL].[TASKS].[TARGET_NAME] to TARGET_TABLE';


GO
EXECUTE sp_rename @objname = N'[ETL].[TASKS].[TARGET_NAME]', @newname = N'TARGET_TABLE', @objtype = N'COLUMN';


GO
PRINT N'Altering [ETL].[addTask]...';


GO
ALTER PROCEDURE [ETL].[addTask]
	@DataSourceId int,
	@TaskName nvarchar(50),
	@DataTargetId int,
	@TargetName nvarchar(50),
	@DataExtractingQuery nvarchar(4000)
AS
BEGIN
	IF(NOT EXISTS(SELECT * FROM ETL.TASKS 
								WHERE NAME = @TaskName 
								AND SOURCE_ID = @DataSourceId
								AND TARGET_ID = @DataTargetId)
	)
	BEGIN
		INSERT INTO ETL.TASKS( SOURCE_ID, NAME, TARGET_ID, [TARGET_TABLE],  DATA_QUERY)
		VALUES(
			@DataSourceId,
			@TaskName,
			@DataTargetId,
			@TargetName,
			@DataExtractingQuery
			)
		SELECT * FROM ETL.TASKS WHERE ID  = @@IDENTITY
	END	
	ELSE 
	BEGIN
		PRINT 'THIS TASK IS ALREADY EXISTS';
		SELECT * FROM ETL.TASKS WHERE NAME = @TaskName AND SOURCE_ID = @DataSourceId AND TARGET_ID = @DataTargetId;
	END
END
GO
PRINT N'Altering [ETL].[getTasks]...';


GO
ALTER PROCEDURE [ETL].[getTasks]
	@DataSourceId int = 0
AS
BEGIN
	SELECT 
		T.ID AS TASK_ID,
		T.[NAME] AS TASK_NAME,
		T.SOURCE_ID,
		T.DATA_QUERY,
		S.CONNECTION AS SOURCE_CONNECTION,
		S.[NAME] AS SOURCE_NAME,
		T.[TARGET_TABLE],
		D.CONNECTION AS TARGET_CONNECTION,
		D.[NAME] AS TARGET_NAME
	FROM ETL.TASKS T
	INNER JOIN ETL.DATASOURCE S ON T.SOURCE_ID = S.ID
	INNER JOIN ETL.DATASOURCE D ON T.TARGET_ID = D.ID
	WHERE T.SOURCE_ID = @DataSourceId OR @DataSourceId = 0
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1824de11-e303-4b89-90b5-dfd8ca843f2f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1824de11-e303-4b89-90b5-dfd8ca843f2f')

GO

GO
PRINT N'Update complete.';


GO
