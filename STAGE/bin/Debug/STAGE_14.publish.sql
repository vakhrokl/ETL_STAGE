/*
Deployment script for STAGE

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "STAGE"
:setvar DefaultFilePrefix "STAGE"
:setvar DefaultDataPath "E:\SQLDATA\DATABASE\"
:setvar DefaultLogPath "E:\SQLDATA\LOG\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [ETL].[DATASOURCE]...';


GO
CREATE TABLE [ETL].[DATASOURCE] (
    [ID]         INT            IDENTITY (1, 1) NOT NULL,
    [NAME]       NVARCHAR (50)  NULL,
    [CONNECTION] NVARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [ETL].[TASKS]...';


GO
CREATE TABLE [ETL].[TASKS] (
    [ID]          INT             IDENTITY (1, 1) NOT NULL,
    [NAME]        NVARCHAR (50)   NOT NULL,
    [SOURCE_ID]   INT             NOT NULL,
    [TARGET_ID]   INT             NOT NULL,
    [DATA_QUERY]  NVARCHAR (4000) NOT NULL,
    [TARGET_NAME] NVARCHAR (50)   NULL,
    [STATUS]      BIT             NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [ETL].[TASKS]...';


GO
ALTER TABLE [ETL].[TASKS]
    ADD DEFAULT (0) FOR [STATUS];


GO
PRINT N'Creating unnamed constraint on [ETL].[TASKS]...';


GO
ALTER TABLE [ETL].[TASKS] WITH NOCHECK
    ADD FOREIGN KEY ([SOURCE_ID]) REFERENCES [ETL].[DATASOURCE] ([ID]);


GO
PRINT N'Creating unnamed constraint on [ETL].[TASKS]...';


GO
ALTER TABLE [ETL].[TASKS] WITH NOCHECK
    ADD FOREIGN KEY ([TARGET_ID]) REFERENCES [ETL].[DATASOURCE] ([ID]);


GO
PRINT N'Altering [ETL].[addSource]...';


GO
--ADD SQL SOURCE TO ETL.DATASOURCE TABLE, RETURN INSERTED OR EXISTED ROW
ALTER PROCEDURE [ETL].[addSource]
	@SourceName nvarchar(50),
	@ConnectionString nvarchar(255)
AS
BEGIN
	IF(NOT EXISTS (SELECT * FROM ETL.DATASOURCE WHERE NAME = @SourceName))
	BEGIN
		INSERT INTO ETL.DATASOURCE(NAME, CONNECTION)
			VALUES( @SourceName, @ConnectionString);

		SELECT  @@IDENTITY AS [ID], @SourceName AS [NAME], @ConnectionString AS [CONNETION];
	END
	ELSE
	BEGIN
		SELECT [ID], [NAME], [CONNECTION] FROM ETL.DATASOURCE WHERE NAME = @SourceName;
		PRINT 'THIS SOURCE IS ALREADY EXISTS';
	END
END
GO
PRINT N'Altering [ETL].[addTask]...';


GO
ALTER PROCEDURE [ETL].[addTask]
	@DataSourceId int,
	@TaskName nvarchar(50),
	@TargetName nvarchar(50),
	@DataExtractingQuery nvarchar(4000)
AS
BEGIN
	IF(NOT EXISTS(SELECT * FROM ETL.TASKS 
								WHERE NAME = @TaskName 
								AND SOURCE_ID = @DataSourceId)
	)
	BEGIN
		INSERT INTO ETL.TASKS( SOURCE_ID, NAME, TARGET_NAME,  DATA_QUERY)
		VALUES(
			@DataSourceId,
			@TaskName,
			@TargetName,
			@DataExtractingQuery
			)
		SELECT * FROM ETL.TASKS WHERE ID  = @@IDENTITY
	END	
	ELSE 
	BEGIN
		PRINT 'THIS TASK IS ALREADY EXISTS';
		SELECT * FROM ETL.TASKS WHERE NAME = @TaskName 
								AND SOURCE_ID = @DataSourceId;
	END
END
GO
PRINT N'Altering [ETL].[getTasks]...';


GO
ALTER PROCEDURE [ETL].[getTasks]
	@DataSourceId int = 0
AS
BEGIN
	SELECT 
		T.ID AS TASK_ID,
		T.[NAME] AS TASK_NAME,
		T.TARGET_NAME,
		T.SOURCE_ID,
		T.DATA_QUERY,
		S.CONNECTION AS SOURCE_CONNECTION,
		S.[NAME] AS SOURCE_NAME,
		D.CONNECTION AS TARGET_CONNECTION,
		D.[NAME] AS TARGET_NAME
	FROM ETL.TASKS T
	INNER JOIN ETL.DATASOURCE S ON T.SOURCE_ID = S.ID
	INNER JOIN ETL.DATASOURCE D ON T.TARGET_ID = D.ID
	WHERE T.SOURCE_ID = @DataSourceId OR @DataSourceId = 0
END
GO
PRINT N'Creating [ETL].[setTaskStatus]...';


GO
CREATE PROCEDURE [ETL].[setTaskStatus]
	@TaskId int = 0,
	@Status bit = 1
AS
BEGIN
	UPDATE ETL.TASKS
	SET [STATUS] = @Status
	WHERE ID = @TaskId
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'ETL.TASKS'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
